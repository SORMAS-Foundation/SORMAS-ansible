- name: Set hostname
  hostname:
    name: '{{ domain_name }}'

- name: Install git-core
  package:
    name: git-core
    state: present       

- name: Clone the Code repository to the remote host.
  git:
      repo: "https://github.com/hzi-braunschweig/SORMAS-Docker.git"
      dest: /root/sormas-docker
      version: "{{ SORMAS_DOCKER_VERSION }}"
      force: yes

- name: Replace SORMAS_SERVER_URL in .env with correct domain
  lineinfile:
    path: /root/sormas-docker/.env
    regexp: '^SORMAS_SERVER_URL='
    line: 'SORMAS_SERVER_URL={{ domain_name }}'
  
- name: Replace SORMAS_PATH in .env with correct domain
  lineinfile:
    path: /root/sormas-docker/.env
    regexp: '^SORMAS_PATH='
    line: 'SORMAS_PATH=/var/lib/docker'
  
- name: Replace LATITUDE in .env with correct latitude
  lineinfile:
    path: /root/sormas-docker/.env
    regexp: '^LATITUDE='
    line: 'LATITUDE={{ latitude }}'
  
- name: Replace LONGITUDE in .env with correct longitude
  lineinfile:
    path: /root/sormas-docker/.env
    regexp: '^LONGITUDE='
    line: 'LONGITUDE={{ longitude }}'

- name: Replace TZ in .env with correct timezone
  lineinfile:
    path: /root/sormas-docker/.env
    regexp: '^TZ='
    line: 'TZ={{ timezone }}'
    
- name: Replace acme_mail in .env with correct email
  lineinfile:
    path: /root/sormas-docker/.env
    regexp: '^LETSENCRYPT_MAIL='
    line: 'LETSENCRYPT_MAIL={{ acme_email }}'
    
- name: Set value for DISABLE_CERTBOT
  lineinfile:
    path: /root/sormas-docker/.env
    regexp: '^DISABLE_CERTBOT='
    line: 'DISABLE_CERTBOT={{ "true" if use_existing_certs else "true" if selfsigned_cert_generation else "false" if use_letsencrypt }}'      
    
- name: Create letsencrypt directories to copy certificates
  file:
    path: '{{ item }}'
    state: directory
  when: selfsigned_cert_generation or use_existing_certs
  with_items:
    - '/var/lib/docker/letsencrypt-config/keys/letsencrypt'
    - '/var/lib/docker/letsencrypt-config/etc/letsencrypt/live/{{ domain_name }}'

- name: Copy existing pem files into letsencrypt folder
  copy:
    src: '{{ item }}.pem'
    dest: '/var/lib/docker/letsencrypt-config/keys/letsencrypt/{{ item }}.pem'
  with_items:
    - fullchain
    - privkey
  when: use_existing_certs

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  openssl_privatekey:
    path: '/var/lib/docker/letsencrypt-config/keys/letsencrypt/privkey.pem'
  when: selfsigned_cert_generation
  retries: 2

- name: Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path: '/var/lib/docker/letsencrypt-config/keys/letsencrypt/{{ domain_name }}.csr'
    privatekey_path: '/var/lib/docker/letsencrypt-config/keys/letsencrypt/privkey.pem'
    common_name: '{{ domain_name }}'
  when: selfsigned_cert_generation
  
- name: Generate a Self Signed OpenSSL certificate
  openssl_certificate:
    path: '/var/lib/docker/letsencrypt-config/keys/letsencrypt/fullchain.pem'
    privatekey_path: '/var/lib/docker/letsencrypt-config/keys/letsencrypt/privkey.pem'
    csr_path: '/var/lib/docker/letsencrypt-config/keys/letsencrypt/{{ domain_name }}.csr'
    provider: selfsigned
  when: selfsigned_cert_generation    

- name: Run docker-compose with letsencrypt service
  docker_compose:
    project_src: /root/sormas-docker
    files: docker-compose_nginx.yml
    pull: yes
  retries: 2

- name: Check fullchain.pem exists.
  stat:
    path: /var/lib/docker/letsencrypt-config/keys/letsencrypt/fullchain.pem
  register: fullchain_details

- name: Copy pem files into correct folder
  copy:
    src: '/var/lib/docker/letsencrypt-config/keys/letsencrypt/{{ item }}.pem'
    dest: '/var/lib/docker/letsencrypt-config/etc/letsencrypt/live/{{ domain_name }}/{{ item }}.pem'
    remote_src: yes
  with_items:
    - fullchain
    - privkey
  when: fullchain_details.stat.exists and (use_existing_certs or selfsigned_cert_generation)
